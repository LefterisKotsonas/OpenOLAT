/**
 * The math editor plugin offers a latex-formula real-time authoring environment.
 * See how it looks as you type. The plugin uses MathJax to format the tex formulas.
 * 
 * 18.06.2009 timo.wuersch@frentix.com
 */
(function() {
    'use strict'; 
    
    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');
    
    var cachedTrans;
	var MathJax = window.MathJax;
	// Load the OLAT translator.
	function translator() {	
		if(cachedTrans) return cachedTrans;
		var mainWin = o_getMainWin();
		if (mainWin) {
			cachedTrans = jQuery(document).ooTranslator().getTranslator(mainWin.o_info.locale, 'org.olat.core.gui.components.form.flexible.impl.elements.richText.plugins.olatmatheditor')	
		} else {
			cachedTrans = {	translate : function(key) { return key; } }
		}
		return cachedTrans;
	}
    
    function isLatexElement(element) {
		return element.hasAttribute('data-mathtex');
	}
    
	/**
	 * Initializes the plugin, this will be executed after the plugin has been created.
	 * This call is done before the editor instance has finished it's initialization so use the onInit event
	 * of the editor instance to intercept that event.
	 *
	 * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.
	 * @param {string} url Absolute URL to where the plugin is located.
	 */
	var register = function (editor, url) {
			
		function insertLatex(dialogApi) {
	        // Initialize local variables
	        var data = dialogApi.getData();
	        var tex = data.latex;
	        var contentNode = editor.selection.getNode();

	        // Check whether the selection is a jsMath objet by looking at its class attribute
	        if ((contentNode != null) && (/mceItemJSMath/.test(editor.dom.getAttrib(contentNode, "class")))) {
	            editor.dom.setAttrib(contentNode, "data-mathtex", tex);
	            editor.dom.setAttrib(contentNode, "data-mce-placeholder", "latex")
	            editor.dom.setAttrib(contentNode, "title", escape(tex));
	            editor.execCommand("mceRepaint");
				editor.setDirty(true);
	        } else {
	        	var htmlCode = '<img src="' + tinymce.Env.transparentSrc + '" class="mce-shim mceItemJSMath" data-mce-placeholder="latex" data-mathtex="' + tex + '" title="' + escape(tex) + '" width="32" height="32"/>';
	            editor.execCommand("mceInsertContent", false, htmlCode);
	        }
	        
			var mf = document.getElementById('mathlive');
			if(mf) {
				mf.executeCommand("hideVirtualKeyboard");
			}
	        dialogApi.close();
		}
			
		function showDialog() {
		
			var data = {
				latex: ''
			};
			
			var selectedNode = editor.selection.getNode();
	        if ((selectedNode.nodeName.toLowerCase() == "img") && (selectedNode.className.indexOf("mceItemJSMath") >= 0)) {
				data.latex = jQuery(selectedNode).attr('data-mathtex');
	        }
	        
			var mathLiveUrl = editor.getParam("mathLiveUrl");
	        var mathLiveHtml = '<script src="' + mathLiveUrl + '"></script>';
			mathLiveHtml += '<math-field id="mathlive" virtual-keyboard-mode="manual">' + data.latex + '</math-field>';
		
			var body = {
				type: 'panel',
				items: [
					{ name: 'cortexLabel', type: 'label', label: translator().translate('olatmatheditor.mathLiveTitle'), items: [] },
					{ name: 'cortex', type: 'htmlpanel', label: '', html: mathLiveHtml },
				   	{ name: 'latex', type: 'textarea', label: translator().translate('olatmatheditor.latexGroupTitle') },
				    { name: 'preview', type: 'htmlpanel', label: '',
				    	 html: '<iframe id="mathpreviewFormula" style="width: 100%; min-height: 50px;"></iframe>'
					},
					{ name: 'hints', type: 'htmlpanel', label: '',
				    	html:'<div style="width:100%;">' + translator().translate('olatmatheditor.latexGroupHint') + '</div>'
					}
				]
			};
			
			var win = editor.windowManager.open({
				title: translator().translate('olatmatheditor.formulaTabTitle'),
				size: 'medium',
				body: body,
				initialData: data,
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
		        ],
		        onChange: function(dialogApi) {
					var mf = document.getElementById('mathlive');
					mf.setValue(dialogApi.getData().latex, {suppressChangeNotifications: true});
					updatePreview(dialogApi);
				},
				onSubmit: insertLatex
			});
			
			// add scripts to iframe
			var iframe = document.getElementById("mathpreviewFormula");
			var iframeWindow = iframe.contentWindow || iframe.contentDocument.document || iframe.contentDocument;
			var iframeDocument = iframeWindow.document;
			var iframeHead = iframeDocument.getElementsByTagName('head')[0];
			var iframeBody = iframeDocument.getElementsByTagName('body')[0];
	
			var mathJaxUrl = editor.getParam("mathJaxUrl");
			var node = iframeWindow.document.createElement('script');
			node.src = mathJaxUrl + 'tex-mml-chtml.js';
			node.type = 'text/javascript';
			node.async = true;
			node.charset = 'utf-8';
			iframeHead.appendChild(node);
			
			function updatePreview(dialogApi) {
				var MathJax = iframeWindow.MathJax;
				var div = iframeBody.querySelector('div');
				if (!div) {
					div = iframeDocument.createElement('div');
					div.classList.add("math");
					iframeBody.appendChild(div);
				}
				
				var data = dialogApi.getData();
				var tex = data.latex;
				div.innerHTML = '$$' + tex + '$$';
				if (MathJax && MathJax.startup) {
					MathJax.startup.getComponents();
					MathJax.typeset();
				}
			}
			
			document.getElementById('mathlive').addEventListener('input',(ev) => {
    			var newData = {
    				latex: ev.target.value
    			}
    			win.setData(newData);
				updatePreview(win);
			});
			
			updatePreview(win);
		}
		
		editor.on('init', function() {
		     if (editor.settings.content_css !== false) {
		    	 editor.dom.loadCSS(url + "/css/content.css");
		     }
		});

        /** 
         * This setContent handler is used to convert the <span class="math"> spans
         * to the placeholder <img> tags when loading the document.
         */
		editor.on('LoadContent',function(e) {
			// Find all SPANs of class "math"...
			tinymce.each(editor.dom.select("span.math"), function(node) {
		         // ...and for each of these, create an IMG...
				 var latex = node.innerHTML;
				 var img = editor.dom.create("img", {
					 "class": "mce-shim mceItemJSMath",
					 width: "32",
					 height: "32",
					 src: tinymce.Env.transparentSrc,
					 "data-mathtex": latex,
					 "data-mce-placeholder": "latex",
					 "title": node.title
				 });
				 //  ...and replace the SPAN by the IMG.
				 editor.dom.replace(img, node);
		     });
		});

        /** 
          * This onPreProcess handler is used to convert the placeholder &lt;img&gt; tags back to the
          * &lt;span class="math"&gt; tags when saving the document.
          */
		editor.on('PreProcess',function(e, format) {
			// Find all IMGs of class "mceItemJSMath"...
			jQuery('img.mceItemJSMath', e.node).each(function(idx, elm) {
				// ...and for each of these, create a SPAN...
				var span = editor.dom.create("span", {
					"class": "math",
					title : elm.title
				}, jQuery(elm).attr('data-mathtex'));
				// ...and replace the IMG by the SPAN.
				editor.dom.replace(span, elm);
			});
		});

		// Register plugin button
		editor.ui.registry.addToggleButton('olatmatheditor', {
			icon : 'oo-sigma',
			tooltip : translator().translate('olatmatheditor.desc'),
			onAction: showDialog,
			onSetup: function (buttonApi) {
				var selection = editor.selection;
				buttonApi.setActive(isLatexElement(selection.getNode()));
				return selection.selectorChangedWithUnbind('img[data-mathtex]', buttonApi.setActive).unbind;
			}
		});
			
		editor.ui.registry.addMenuItem('olatmatheditor', {
			text : translator().translate('olatmatheditor.desc'),
			icon : 'oo-sigma',
			onAction: showDialog,
		});
	};
	
	function Plugin () {
		global$2.add('olatmatheditor', function (editor, url) {
			register(editor, url);
		});
    }

    Plugin();
})();
